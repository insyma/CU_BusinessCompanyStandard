/*
	@license Angular Treeview version 0.1.6
	â“’ 2013 AHN JAE-HA http://github.com/eu81273/angular.treeview
	License: MIT
*/

(function (f) {
    f.module("angularTreeview", []).directive("treeModel", function ($compile) {
        return {
            restrict: "A",
            link: function (b, h, c) {
                var a = c.treeId,
                    g = c.treeModel,
                    e = c.nodeLabel || "label",
                    d = c.nodeChildren || "children",
                    e = '<ul><li data-ng-repeat="node in ' + g + '"><i class="collapsed2" data-ng-show="node.' + d + '.length && node.collapsed" data-ng-click="' + a + '.selectNodeHead(node)"></i><i class="expanded2" data-ng-show="node.' + d + '.length && !node.collapsed" data-ng-click="' + a + '.selectNodeHead(node)"></i><i class="normal" data-ng-hide="node.' +
                        d + '.length"></i> <span data-ng-class="node.selected" data-ng-click="' + a + '.selectNodeLabel(node)">{{node.' + e + '}}</span><div data-ng-hide="node.collapsed" data-tree-id="' + a + '" data-tree-model="node.' + d + '" data-node-id=' + (c.nodeId || "id") + " data-node-label=" + e + " data-node-children=" + d + "></div></li></ul>";
                a && g && (c.angularTreeview && (b[a] = b[a] || {}, b[a].selectNodeHead = b[a].selectNodeHead || function (a) {
                    a.collapsed = !a.collapsed
                }, b[a].selectNodeLabel = b[a].selectNodeLabel || function (c) {
                    b[a].currentNode && b[a].currentNode.selected &&
                        (b[a].currentNode.selected = void 0);
                    c.selected = "selected";
                    b[a].currentNode = c
                }), h.html('').append($compile(e)(b)))
            }
        }
    })
})(angular);

(function (f) {
    f.module("angularTreeviewCheckbox", []).directive("treeModel", function ($compile) {
        return {
            restrict: "A",
            link: function (b, h, c) {
                var a = c.treeId,
                    g = c.treeModel,
                    e = c.nodeLabel || "label",
                    d = c.nodeChildren || "children",
                    v = c.nodeId || "Id",
                    z = c.checked || "Checked",
                    p = c.parentid || "ParentId",
                    rf = c.referenceid || "CategoryId",
                    s = c.selectable || "Selectable",
                    nn = c.nodeName || 'NodeName',
                    e = '<ul parent="{{node.' + p + '}}">' +

                        '<li data-ng-repeat="node in ' + g + '" >' +
                        '<i class="collapsed2" data-ng-show="node.' + d + '.length && ' + (nn == "CategoriesPrice" || nn == "CategoriesDiscount" ? '!node.collapsed"' : 'node.collapsed"') + ' data-ng-click="' + a + '.selectNodeHead(node)"></i>' +
                        '<i class="expanded2" data-ng-show="node.' + d + '.length && ' + (nn == "CategoriesPrice" || nn == "CategoriesDiscount" ? 'node.collapsed"' : '!node.collapsed"') + ' data-ng-click="' + a + '.selectNodeHead(node)"></i>' +
                        '<i class="normal" data-ng-hide="node.' + d + '.length"></i> ' +
                        '<input id="' + nn + '-{{node.' + rf + '}}-{{node.' + v + '}}" type="checkbox" ' + (nn == "CategoriesPrice" || nn == "CategoriesDiscount" ? ' onclick="onChangeCheckbox(this)" ' : '') + ' reference="{{node.' + rf + '}}" parent="{{node.' + p + '}}" name="' + nn + '"  ng-show="node.Selectable" value="{{node.' + v + '}}" ng-checked="node.' + z + '" /> ' +
                            '<label for="' + nn + '-{{node.' + rf + '}}-{{node.' + v + '}}" onclick="onClickLabel(\'' + nn + '-{{node.' + rf + '}}-{{node.' + v + '}}\')" ></label>' +
                        
                                (nn == "CategoriesPrice" || nn == "CategoriesDiscount" ? '<span data-ng-hide="(node.' + rf + ' != 0)" data-ng-class="node.selected" ng-hide="node.ParentId==0" data-ng-click="' + a + '.selectNodeLabel(node)">{{node.' + e + '}}</span>' +
                                 '<span data-ng-hide=" node.' + rf + ' == 0 " data-ng-class="node.selected" class="style-text" ng-hide="node.ParentId==0" data-ng-click="' + a + '.selectNodeLabel(node)">{{node.' + e + '}}</span>'

                            :
                            '<span  data-ng-class="node.selected" ng-hide="node.ParentId==0" data-ng-click="' + a + '.selectNodeLabel(node)">{{node.' + e + '}}</span>'
                            ) +




                            
                                '<div ' + (nn == "CategoriesPrice" || nn == "CategoriesDiscount" ? ' data-ng-show="node.collapsed || (node.' + rf + ' == 1)" ' : ' data-ng-show="!node.collapsed" ') + 'data-tree-id="' + a + '" data-tree-model="node.' + d + '" data-node-name="' + nn + '" data-node-id=' + (c.nodeId || "id") + "  data-node-label=" + e + " data-node-children=" + d + "></div>" +
                             "</li>" +

                        "</ul>";

                a && g && (1 && (b[a] = b[a] || {},

                b[a].selectNodeHead = b[a].selectNodeHead || function (a) {
                    a.collapsed = !a.collapsed;
                },


                b[a].selectNodeLabel = b[a].selectNodeLabel || function (c) {
     b[a].currentNode && b[a].currentNode.selected &&
                        (b[a].currentNode.selected = void 0);
                    c.selected = "selected";
                    b[a].currentNode = c
                }), h.html('').append($compile(e)(b)))
            }
        }
    })
})(angular);

var grayClassname = "gray";

function onClickLabel(id) {
    if (id != "") {
        var obj = $('#' + id);
        if ($(obj).attr("name") == "CategoriesPrice" || $(obj).attr("name") ==  "CategoriesDiscount") {
            onChangeCheckbox($(obj));
        } else {
            // 
            console.log($(obj).attr("checked"));
        }        
    }    
}

function onChangeCheckbox(productCheckbox) {
    if ($(productCheckbox).attr('reference') == 0) {
        // Check on product
        // Check all other same products
        CheckSameProduct($(productCheckbox));
        
    } else {
        // Check on category
        CheckChildren($(productCheckbox));
    }
}
function CheckSameProduct(product) {
    //$("[value='" + $(product).attr("value") + "']").attr("checked", ($(product).attr("checked") != undefined ? true : false));
    var val = $(product).attr("value");
    var name = $(product).attr("name");
    var checked = ($(product).attr("checked") != undefined ? true : false);


    $("input[value='" + val + "'][name='" + name + "']").each(function () {
        $(this).attr("checked", checked);        
        
        CheckParent($(this));
    });

    // Update ProductView Paging data source
    var scopePaging;
    var productViewname;

    if (name=="CategoriesPrice") {
        scopePaging = $('#Product-Price-Editor').scope();
        productViewname = "PriceProductViews";
    } else {
        scopePaging = $('#appCommonCode').scope();
        productViewname = "QntDiscountProductViews";
    }

    
    
    var pageCount = scopePaging.pagedItems[productViewname].length;
    for (var i = 0; i < pageCount; i++) {
        for (var j = 0; j < scopePaging.pagedItems[productViewname][i].length; j++) {
            if (scopePaging.pagedItems[productViewname][i][j]["Id"] == val) {
                scopePaging.pagedItems[productViewname][i][j]["Checked"] = checked;
                return;
            }
        }
    }
}

function AddGrayClass(category) {    
    var name = $(category).attr("name");
    var arr = $(category).parent('li').find("input[reference!='0'][name='" + name + "']");

    for (var i = arr.length - 1; i >= 0; i--) {
        var allChecked = true;
        var someChecked = false;
        var someInGray = false;

        var obj = $(arr[i]);
        
        // Loop through all children    
        if ($("input[parent='" + $(obj).attr("reference") + "'][name='" + name + "']").length == 0) {
            allChecked = false;
        } else {
            $("input[parent='" + $(obj).attr("reference") + "'][name='" + name + "']").each(function() {
                if ($(this).attr("checked") != undefined) {
                    someChecked = true;
                } else {
                    allChecked = false;
                }

                if ($(this).hasClass(grayClassname)) {
                    someInGray = true;
                }

            });
        }
        
        $(obj).attr("checked", allChecked || someChecked);

        
        if (someInGray || (allChecked == false && someChecked == true)) {
            $(obj).addClass(grayClassname);
        } else {
            $(obj).removeClass(grayClassname);
        }
    }    

}

function CheckChildren(category) {
    var name = $(category).attr("name");
    var checked = ($(category).attr("checked") != undefined ? true : false);

    $(category).parent('li').find("input[name='" + name + "']").attr("checked", checked);

    
    $(category).parent('li').find("input[reference='0'][name='" + name + "']").each(function () {
        CheckSameProduct($(this));
    });
}

function CheckParent(category) {
    var parent = $(category).attr("parent");
    var name = $(category).attr("name");
    
    if (parent != "0") {
        var allChecked = true;
        var someChecked = false;
        var someInGray = false;

        // Loop through all sibling            
        $("input[parent='" + parent + "'][name='" + name + "']").each(function() {
            if ($(this).attr("checked") != undefined) {
                someChecked = true;
            } else {
                allChecked = false;
            }

            if ($(this).hasClass(grayClassname)) {
                someInGray = true;
            }
        });
        
        // Its parent

        $("input[reference='" + parent + "'][name='" + name + "']").each(function () {
            $(this).attr("checked", allChecked || someChecked);            
            
            if (someInGray || (allChecked == false && someChecked == true)) {
                $(this).addClass(grayClassname);
            } else {
                $(this).removeClass(grayClassname);
            }

            // Recursive
            CheckParent($(this));
        });
    }
}
