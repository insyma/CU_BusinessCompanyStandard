@import (reference) '_variables.less';

// Flex Columns
.columns(@columnGutter) {
	.flex-display;
	.flex-flow(row wrap);
	font-size: 0;
	margin: @columnGutter 0 0 -@columnGutter;
	margin-bottom: -@columnGutter * 2 !important; // NEU SCHM 20180626
	position: relative;
	top: -@columnGutter; // NEU SCHM 20180626

	& > * {
		display: inline-block;
		font-size: 1rem;
		margin: -@columnGutter 0 -@columnGutter;
		position: relative;
		vertical-align: top;
		width: 100%;
	}
}
// ROUNDING PX(0.1px) FOR IE 11 and lower
.col-(@colValue, @columnGutter) when (@columnGutter > 0) {
  -webkit-flex: 0 0 ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
      -ms-flex: 0 0 ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
          flex: 0 0 ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
    max-width: ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
    margin: @columnGutter @columnGutter 0 0 ;
    left: @columnGutter;
    position: relative;
    top: -@columnGutter;
}
.col-(@colValue, @columnGutter) when (@columnGutter < 0) {
  -webkit-flex: 0 0 ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
      -ms-flex: 0 0 ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
          flex: 0 0 ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
    max-width: ~"calc((100% / @{colValue}) - (@{columnGutter} + 0.1px))";
    margin: @columnGutter @columnGutter 0 0 ;
    left: @columnGutter;
    position: relative;
    top: -@columnGutter;
}
.col-(@colValue, @columnGutter) when (@columnGutter = 0) {
  -webkit-flex: 0 0 ~"calc((100% / @{colValue}) - 0.1px)";
      -ms-flex: 0 0 ~"calc((100% / @{colValue}) - 0.1px)";
          flex: 0 0 ~"calc((100% / @{colValue}) - 0.1px)";
    max-width: ~"calc((100% / @{colValue}) - 0.1px)";
    margin: @columnGutter @columnGutter 0 0 ;
    left: @columnGutter;
    position: relative;
    top: -@columnGutter;
}
////////////////////////////////////////////////////////////////////////
// fullabsoulte
////////////////////////////////////////////////////////////////////////
  
.pos-absolute() {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
}

.pos-center() {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

.border-radius(@radius) {
  -webkit-border-radius: @radius;
     -moz-border-radius: @radius;
      -ms-border-radius: @radius;
          border-radius: @radius;
}

.border-radius-all(@tradius, @rradius, @bradius, @lradius) {
  -webkit-border-radius: @tradius @rradius @bradius @lradius;
     -moz-border-radius: @tradius @rradius @bradius @lradius;
      -ms-border-radius: @tradius @rradius @bradius @lradius;
          border-radius: @tradius @rradius @bradius @lradius;
}



.transitions(@time) {
-webkit-transition: all @time cubic-bezier(0.4, 0, 0.2, 1); // Safari / Chrome 
     -o-transition: all @time cubic-bezier(0.4, 0, 0.2, 1); // Opera 
   -moz-transition: all @time cubic-bezier(0.4, 0, 0.2, 1); // FireFox 
    -ms-transition: all @time cubic-bezier(0.4, 0, 0.2, 1); // IE 
        transition: all @time cubic-bezier(0.4, 0, 0.2, 1); 
}


.seperate-transitions (@value1,@value2:X,...)
{
    @value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;

    -webkit-transition: @value;
    -moz-transition: @value;
    -ms-transition: @value;
    -o-transition: @value;
    transition: @value;
}

.no-transitions() {
-webkit-transition: none; // Safari / Chrome 
     -o-transition: none; // Opera 
   -moz-transition: none; // FireFox 
    -ms-transition: none; // IE 
        transition: none; 
}
.transform(@string){
	-webkit-transform: @string;
	-moz-transform: 	 @string;
	-ms-transform: 		 @string;
	-o-transform: 		 @string;
}
.scale (@factor) {
	-webkit-transform: scale(@factor);
	-moz-transform: 	 scale(@factor);
	-ms-transform: 		 scale(@factor);
	-o-transform: 		 scale(@factor);
}
.rotate (@deg) {
	-webkit-transform: rotate(@deg);
	-moz-transform: 	 rotate(@deg);
	-ms-transform: 		 rotate(@deg);
	-o-transform: 		 rotate(@deg);
}
.skew (@deg, @deg2) {
	-webkit-transform:       skew(@deg, @deg2);
	-moz-transform: 	 skew(@deg, @deg2);
	-ms-transform: 		 skew(@deg, @deg2);
	-o-transform: 		 skew(@deg, @deg2);
}
.translate (@x, @y:0) {
	-webkit-transform:       translate(@x, @y);
	-moz-transform: 	 translate(@x, @y);
	-ms-transform: 		 translate(@x, @y);
	-o-transform: 		 translate(@x, @y);
}
.translate3d (@x, @y: 0, @z: 0) {
	-webkit-transform:       translate3d(@x, @y, @z);
	-moz-transform: 	 translate3d(@x, @y, @z);
	-ms-transform: 		 translate3d(@x, @y, @z);
	-o-transform: 		 translate3d(@x, @y, @z);
}
.perspective (@value: 1000) {
	-webkit-perspective: 	@value;
	-moz-perspective: 	@value;
	-ms-perspective: 	@value;
	perspective: 		@value;
}
.transform-origin (@x:center, @y:center) {
	-webkit-transform-origin: @x @y;
	-moz-transform-origin:    @x @y;
	-ms-transform-origin:     @x @y;
	-o-transform-origin:      @x @y;
}
.lighten (@color, @wert){
    background-color: mix(@color, rgb(255,255,255), @wert);
}
.darken (@color, @wert){
    background-color: mix(@color, rgb(0,0,0), @wert);
}
////////////////////////////////////////////////////////////////////////
// Flex
////////////////////////////////////////////////////////////////////////

.flex-display(@display: flex) {
	display: ~"-webkit-@{display}";
	display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
	display: ~"-ms-@{display}"; // IE11
	display: @display;
}

.flex-flow(@flow) {
  -webkit-flex-flow: @flow;
      -ms-flex-flow: @flow;
          flex-flow: @flow;
}
.flex(@columns: initial) {
  -webkit-flex: @columns;
      -ms-flex: @columns;
          flex: @columns;
}



////////////////////////////////////////////////////////////////////////
//  gradients
////////////////////////////////////////////////////////////////////////
.gradient (@startColor: #eee, @endColor: white) {
	background-color: @startColor;
	background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
	background: -webkit-linear-gradient(top, @startColor, @endColor);
	background: -moz-linear-gradient(top, @startColor, @endColor);
	background: -ms-linear-gradient(top, @startColor, @endColor);
	background: -o-linear-gradient(top, @startColor, @endColor);
}

.gradient-horizontal (@startColor: #eee, @endColor: white) {
	background-color: @startColor;
	background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
	background-image: -webkit-linear-gradient(left, @startColor, @endColor);
	background-image: -moz-linear-gradient(left, @startColor, @endColor);
	background-image: -ms-linear-gradient(left, @startColor, @endColor);
	background-image: -o-linear-gradient(left, @startColor, @endColor);
}

////////////////////////////////////////////////////////////////////////
//  buttons
////////////////////////////////////////////////////////////////////////
.button-block () {
	display: block;
	text-align: center;
	width: 100%;
}
// primary
.button-primary () {
	background-color: @primary;

	&:hover {
		background: fade(@primary, 75%);
	}
}
.button-primary-outline () {
	background-color: @transparent;
	border: 1px solid @primary;
	color: @primary;

	&:hover {
		background-color: @transparent;
		border-color: fade(@primary, 75%);
		color: fade(@primary, 75%);
	}
}
.button-primary-ghost () {
	background-color: @transparent;
	border: none !important;
	color: @primary;

	&:hover {
		background-color: @transparent;
		color: fade(@primary, 75%);
	}
}
// secondary
.button-secondary () {
	background-color: @secondary;

	&:hover {
		background: fade(@secondary, 75%);
	}
}

.button-secondary-outline () {
	background-color: @transparent;
	border: 1px solid @secondary;
	color: @secondary;

	&:hover {
		background-color: @transparent;
		border-color: fade(@secondary, 75%);
		color: fade(@secondary, 75%);
	}
}

.button-secondary-ghost () {
	background-color: @transparent;
	border: none !important;
	color: @secondary;

	&:hover {
		background-color: @transparent;
		color: fade(@secondary, 75%);
	}
}


// black
.button-black () {
	background-color: @black;

	&:hover {
		background: fade(@black, 75%);
	}
}
.button-black-outline () {
	background-color: @transparent;
	border: 1px solid @black;
	color: @black;

	&:hover {
		background-color: @transparent;
		border-color: fade(@black, 75%);
		color: fade(@black, 75%);
	}
}

.button-black-ghost () {
	background-color: @transparent;
	border: none !important;
	color: @black;

	&:hover {
		background-color: @transparent;
		color: fade(@black, 75%);
	}
}


// white
.button-white () {
	background-color: @white;
	color: @primary;

	&:hover {
		background: fade(@white, 75%);
		color: @primary;
	}
}
.button-white-outline () {
	background-color: @transparent;
	border: 1px solid @white;
	color: @white;

	&:hover {
		background-color: @transparent;
		border-color: fade(@white, 75%);
		color: fade(@white, 75%);
	}
}

.button-white-ghost () {
	background-color: @transparent;
	border: none !important;
	color: @white;

	&:hover {
		background-color: @transparent;
		color: fade(@white, 75%);
	}
}

// disabled
.button-disabled () {
	background-color: @disabled;
	color: @text;

	&:hover {
		background-color: @disabled;
		color: @text;
	}
}

.button-disabled-outline () {
	background-color: @transparent;
	border: 1px solid @disabled;
	color: @disabled;

	&:hover {
		background-color: @transparent;
		border: 1px solid @disabled;
		color: @disabled;
	}
}

.button-disabled-ghost () {
	background-color: @transparent;
	border: none !important;
	color: @disabled;

	&:hover {
		background-color: @transparent;
		color: @disabled;
	}
}

////////////////////////////////////////////////////////////////////////
//  for responsive element scaling
////////////////////////////////////////////////////////////////////////

.ratio () {
	position: relative;
	* {
	//	left: 50%;
		position: absolute;
	//	top: 50%;
	//	-ms-transform: translate(-50%, -50%); // IE 9 
	//	-webkit-transform: translate(-50%, -50%); // Safari 
	//	transform: translate(-50%, -50%);
	}

	&:after {
		content: "";
		display: block;
	}
}
// 16 zu 9
.ratio-16-9 () {
	&:after {
		padding-bottom: 56.25%;
	}
}
// 100 = quadratisch
.ratio-square () {
	&:after {
		padding-bottom: 100%;
	}
}
// 75 = landscape
.ratio-landscape () {
	&:after {
		padding-bottom: 75%;
	}
}
// 125 = portrait
.ratio-portrait () {
	&:after {
		padding-bottom: 125%;
	}
}
// x = custom
.ratio-custom(@ratiovalue) {
	&:after {
		padding-bottom: @ratiovalue;
	}
}

.delay(@delay){
    -moz-animation-delay: @delay;
    -webkit-animation-delay: @delay;
    -ms-animation-delay: @delay;
    -o-animation-delay: @delay;
    animation-delay: @delay;
}

// break words
.hyphenate () {
	-ms-hyphens: auto;
	-moz-hyphens: auto;
	-webkit-hyphens: auto;
	hyphens: auto;
}

.breakword () {
	overflow-wrap: break-word;
	word-wrap: break-word;
}

.clearfix() {
	//	display: flow-root !important;
	clear: both;

	&:after,
	&:before {
		content: "";
		display: table;
	}
}


////////////////////////////////////////////////////////////////////////
// calculates REMs from PX from base font 
////////////////////////////////////////////////////////////////////////
.font-size(@font-size: @rootfontsize) {
    @rem: round(@font-size / @rootfontsize, 3); //rounds to 3 decimal places
    //font-size: @font-size * 1px; //fallback to pixels
    font-size: ~"@{rem}rem";
}
